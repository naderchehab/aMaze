<html>

<head>
<title>aMaze</title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<script type="text/javascript" src="webgl-utils.js"></script>
<script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>

<script id="shader-fs" type="x-shader/x-fragment">    precision mediump float;

    void main(void) {
        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
    }
</script>

<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;

    void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
    }
</script>


<script type="text/javascript">

    var gl;
    function initGL(canvas) {
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }


    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }


    var shaderProgram;

    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

        gl.useProgram(shaderProgram);

        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
    }


    var mvMatrix = mat4.create();
    var pMatrix = mat4.create();

    function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
    }



		var squareVertexPositionBuffer;

    function initBuffers() {

        squareVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
        vertices = [
             1.0,  1.0,  0.0,
            -1.0,  1.0,  0.0,
             1.0, -0.1,  0.0,
            -1.0, -0.1,  0.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        squareVertexPositionBuffer.itemSize = 3;
        squareVertexPositionBuffer.numItems = 4;
    }
	
	var time, startTime;
	var CELL_SIZE = 10;
	var GRID_WIDTH = 30;
			
	// draw Scene
    function drawScene() {
		
		time = Date.now();
		
		if (startTime === undefined)
			startTime = time;
 
		//var animTime = ((time - startTime)/50);
		//var animTime = time - startTime;
		var animTime = 100000000000000;
	
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
		mat4.perspective(145, gl.viewportWidth / gl.viewportHeight, 0.1, 100, pMatrix);
        mat4.identity(mvMatrix);
        mat4.translate(mvMatrix, [-150, 150, -50]);
        gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
		
		var grid = createGrid();
				
		// generate maze
		grid = generateMaze(grid);
		
		// draw maze
		drawGrid(grid, animTime);
	}
	
	// create a grid in memory
	function createGrid() {
			var grid = [];
			
			for (var i = 0; i < GRID_WIDTH; i++) {
				grid[i] = [];
				
				for (var j = 0; j < GRID_WIDTH; j++) {
					var walls = 15;
					var cell = createCell(j, i, walls);
					grid[i].push(cell);
				}
			}
			
			return grid;
		}
		
	// Generate maze using the recursive backtracking algorithm
	function generateMaze(grid) {
	
		var visitedCells = [];
		
		// pick a random cell
		var x = Math.floor((Math.random()*GRID_WIDTH));
		var y = Math.floor((Math.random()*GRID_WIDTH));
		
		console.log("x: ", x, "y: ", y);
		
		grid[y][x].visited = true;
		visitedCells.push(grid[y][x]);

		while (visitedCells.length < GRID_WIDTH*GRID_WIDTH) {

			// find unvisited neighbouring cells
			
			var unvisitedNeighbours = [];
			
			if (y-1 >= 0 && grid[y-1][x].visited == false) {
				unvisitedNeighbours.push("N");
			}	
			
			if (y+1 <= GRID_WIDTH-1 && grid[y+1][x].visited == false) {
				unvisitedNeighbours.push("S");
			}
			
			if (x-1 >= 0 && grid[y][x-1].visited == false) {
				unvisitedNeighbours.push("W");
			}
			
			if (x+1 <= GRID_WIDTH-1 && grid[y][x+1].visited == false) {
				unvisitedNeighbours.push("E");
			}
						
			// if there are unvisited neighbouring cells
			if (unvisitedNeighbours.length > 0) {		
				// among the unvisited neighbouring cells, pick a random one
				// and destroy the wall between the current cell and that neighbouring one.
				// Make the new cell the current one.
				
				var randomIndex = Math.floor(Math.random()*unvisitedNeighbours.length);
				
				switch (unvisitedNeighbours[randomIndex]) {
					case "N":
					destroyWall(grid, x, y, "N");
					grid[y-1][x].visited = true;
					visitedCells.push(grid[y-1][x]);
					y--;
					break;
					case "S":
					destroyWall(grid, x, y, "S");
					grid[y+1][x].visited = true;
					visitedCells.push(grid[y+1][x]);
					y++;
					break;
					case "W":
					destroyWall(grid, x, y, "W");
					grid[y][x-1].visited = true;
					visitedCells.push(grid[y][x-1]);
					x--;
					break;
					case "E":
					destroyWall(grid, x, y, "E");
					grid[y][x+1].visited = true;
					visitedCells.push(grid[y][x+1]);
					x++;
					break;
				}
			}
			else if (visitedCells.length > 0) {
				// if there are no neighbouring unvisited cells, go back to the previous cell
				var cell = visitedCells.pop();
				x = cell.x;
				y = cell.y;
			}
			
			else {
				break;
			}
		}
		
		return grid;
	}
	
	// Destroy wall (NSWE)
	function destroyWall(grid, x, y, wall) {
		
		if (x < GRID_WIDTH-1 && wall == "E") {
			grid[y][x].walls = grid[y][x].walls & 14;
			grid[y][x+1].walls = grid[y][x+1].walls & 13;
		}
		
		if (x > 0 && wall == "W") {
			grid[y][x].walls = grid[y][x].walls & 13;
			grid[y][x-1].walls = grid[y][x-1].walls & 14;
		}
		
		if (y < GRID_WIDTH-1 && wall == "S") {
			grid[y][x].walls = grid[y][x].walls & 11;
			grid[y+1][x].walls = grid[y+1][x].walls & 7;
		}
		
		if (y > 0 && wall == "N") {
			grid[y][x].walls = grid[y][x].walls & 7;
			grid[y-1][x].walls = grid[y-1][x].walls & 11;
		}
	}
	
	// create a cell in memory
	function createCell(x, y, walls) {
		var cell = {};
		cell.x = x;
		cell.y = y;
		cell.visited = false;
		cell.walls = walls;
		
		// borders
		if (cell.x == 0) {
			cell.walls = cell.walls | 2;
		}
		
		if (cell.x == GRID_WIDTH-1) {
			cell.walls = cell.walls | 1;
		}
		
		if (cell.y == 0) {
			cell.walls = cell.walls | 8;
		}
		
		if (cell.y == GRID_WIDTH-1) {
			cell.walls = cell.walls | 4;
		}
		
		// openings
		if (cell.x == 0 && cell.y == 0) {
			cell.walls = cell.walls  & 13;
		}
		
		if (cell.x == GRID_WIDTH-1 && cell.y == GRID_WIDTH-1) {
			cell.walls = cell.walls  & 14;
		}
		return cell;
	}
	
	// Draw Grid
	function drawGrid(grid, animTime) {
		
		for (var j = 0; j < GRID_WIDTH; j++) {
			
			for (var i = 0; i < GRID_WIDTH; i++) {
				drawWalls(grid[j][i].walls, animTime);
				mat4.translate(mvMatrix, [CELL_SIZE, 0, 0]);
			}
			
			mat4.translate(mvMatrix, [-CELL_SIZE*GRID_WIDTH, -CELL_SIZE, 0]);
		}
	}

	// Draw a cell's walls
	// walls param is 4 flags (NSWE). if walls = 1111 then draw all of them.
	function drawWalls(walls, animTime) {
		
		var array;
		
		// North
		for (var i = 0; i < CELL_SIZE; i++) {
			if ((i < animTime) && (walls & 8)) {
				setMatrixUniforms();
				gl.drawArrays(gl.TRIANGLE_STRIP, 0, squareVertexPositionBuffer.numItems);		
			}
			mat4.translate(mvMatrix, [1, 0, 0]);
		}
		mat4.translate(mvMatrix, [-CELL_SIZE, 0, 0]);
	
		// South
		mat4.translate(mvMatrix, [0, -CELL_SIZE, 0]);
		for (var i = 0; i < CELL_SIZE; i++) {
			if ((i < animTime) && (walls & 4)) {
				setMatrixUniforms();
				gl.drawArrays(gl.TRIANGLE_STRIP, 0, squareVertexPositionBuffer.numItems);		
			}
			mat4.translate(mvMatrix, [1, 0, 0]);
		}
		mat4.translate(mvMatrix, [-CELL_SIZE, CELL_SIZE, 0]);

		// West
		for (var i = 0; i < CELL_SIZE; i++) {
			if ((i < animTime) && (walls & 2)) {
				setMatrixUniforms();
				gl.drawArrays(gl.TRIANGLE_STRIP, 0, squareVertexPositionBuffer.numItems);		
			}
			mat4.translate(mvMatrix, [0, -1, 0]);
		}
		mat4.translate(mvMatrix, [0, CELL_SIZE, 0]);
	
		// East
		mat4.translate(mvMatrix, [CELL_SIZE, 0, 0]);
		for (var i = 0; i < CELL_SIZE; i++) {
			if ((i < animTime) && (walls & 1)) {
				setMatrixUniforms();
				gl.drawArrays(gl.TRIANGLE_STRIP, 0, squareVertexPositionBuffer.numItems);		
			}
			mat4.translate(mvMatrix, [0, -1, 0]);
		}
		mat4.translate(mvMatrix, [-CELL_SIZE, CELL_SIZE, 0]);
	}

	// Animate
	function animate() {
		requestAnimFrame( animate );
		drawScene();
	}
	
	// webGLStart
    function webGLStart() {
        var canvas = document.getElementById("amaze-canvas");
        initGL(canvas);
        initShaders();
        initBuffers();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);
		
		//animate();
		drawScene();
    }

</script>


</head>


<body onload="webGLStart();">
    <canvas id="amaze-canvas" style="border: none;" width="500" height="500"></canvas>
	<br/>
	Randomly generated "perfect" maze using the recursive backtracking algorithm and WebGL for rendering.<br />
	Refresh to generate another.
</body>

</html>
